{
	"name": "PL_GENERIC_SQL_CDC_INGEST1",
	"properties": {
		"activities": [
			{
				"name": "Get CDC Change Count",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "LookupLSNCDC",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"sqlReaderQuery": {
							"value": "@concat('DECLARE @begin_time datetime, @end_time datetime, @from_lsn binary(10), @to_lsn binary(10) ; \nSET @begin_time = ''',activity('LookupLSNCDC').output.firstRow.CDCLastRun,''';\nSET @end_time = ''',pipeline().parameters.LSNEndTime,''';\nSET @from_lsn = sys.fn_cdc_map_time_to_lsn(''smallest greater than or equal'', @begin_time);\nSET @to_lsn = sys.fn_cdc_map_time_to_lsn(''largest less than or equal'', @end_time);\nSELECT count(1) changecount FROM cdc.fn_cdc_get_net_changes_',pipeline().parameters.SchemaName,'_',pipeline().parameters.TableName,'(@from_lsn, @to_lsn, ''all'')')",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_SQL_Generic1",
						"type": "DatasetReference",
						"parameters": {
							"ServerName": {
								"value": "@pipeline().parameters.ServerName",
								"type": "Expression"
							},
							"DBName": {
								"value": "@pipeline().parameters.DBName",
								"type": "Expression"
							},
							"SchemaName": {
								"value": "@pipeline().parameters.SchemaName",
								"type": "Expression"
							},
							"TableName": {
								"value": "@pipeline().parameters.TableName",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "If Table has changed rows",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Get CDC Change Count",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@greater(int(activity('Get CDC Change Count').output.firstRow.changecount),0)",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Copy incremental data from CDC",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlServerSource",
									"sqlReaderQuery": {
										"value": "@concat('DECLARE @begin_time datetime, @end_time datetime, @from_lsn binary(10), @to_lsn binary(10) ; \nSET @begin_time = ''',activity('LookupLSNCDC').output.firstRow.CDCLastRun,''';\nSET @end_time = ''',pipeline().parameters.LSNEndTime,''';\nSET @from_lsn = sys.fn_cdc_map_time_to_lsn(''smallest greater than or equal'', @begin_time);\nSET @to_lsn = sys.fn_cdc_map_time_to_lsn(''largest less than or equal'', @end_time);\nSELECT * FROM cdc.fn_cdc_get_all_changes_',pipeline().parameters.SchemaName,'_',pipeline().parameters.TableName,'(@from_lsn, @to_lsn, ''all'')')",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "DS_SQL_Generic1",
									"type": "DatasetReference",
									"parameters": {
										"ServerName": "@pipeline().parameters.ServerName",
										"DBName": {
											"value": "@pipeline().parameters.DBName",
											"type": "Expression"
										},
										"SchemaName": {
											"value": "@pipeline().parameters.SchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.TableName",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "DS_ADLSGEN21",
									"type": "DatasetReference",
									"parameters": {
										"ADLSContainerName": {
											"value": "@pipeline().parameters.ADLSContainerName",
											"type": "Expression"
										},
										"DirectoryName": {
											"value": "@concat(pipeline().parameters.TableName,'/','year=',formatDateTime(utcnow(),'yyyy'),'/','month=',formatDateTime(utcnow(),'MM'),'/','day=',formatDateTime(utcnow(),'dd'))",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Copy data to staging for incremental processing",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Copy incremental data from CDC",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "ParquetSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"wildcardFolderPath": {
											"value": "@concat(pipeline().parameters.TableName,'/','year=',formatDateTime(utcnow(),'yyyy'),'/','month=',formatDateTime(utcnow(),'MM'),'/','day=',formatDateTime(utcnow(),'dd'))",
											"type": "Expression"
										},
										"wildcardFileName": "*.parquet",
										"enablePartitionDiscovery": false
									}
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "DS_ADLSGEN21",
									"type": "DatasetReference",
									"parameters": {
										"ADLSContainerName": "@pipeline().parameters.ADLSContainerName",
										"DirectoryName": "@concat(pipeline().parameters.TableName,'/','year=',formatDateTime(utcnow(),'yyyy'),'/','month=',formatDateTime(utcnow(),'MM'),'/','day=',formatDateTime(utcnow(),'dd'))"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "DS_ADLSGEN21",
									"type": "DatasetReference",
									"parameters": {
										"ADLSContainerName": {
											"value": "@pipeline().parameters.StageDirectoryName",
											"type": "Expression"
										},
										"DirectoryName": {
											"value": "@concat(pipeline().parameters.ServerName,'/',pipeline().parameters.TableName)",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Insert Log Success",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Copy incremental data from CDC",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[InsertLog]",
								"storedProcedureParameters": {
									"BronzeCount": {
										"value": {
											"value": "@activity('Copy incremental data from CDC').output.rowsCopied",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"DbName": {
										"value": {
											"value": "@pipeline().parameters.DBName",
											"type": "Expression"
										},
										"type": "String"
									},
									"RunStatus": {
										"value": "Sucess",
										"type": "String"
									},
									"ServerName": {
										"value": {
											"value": "@pipeline().parameters.ServerName",
											"type": "Expression"
										},
										"type": "String"
									},
									"SourceCount": {
										"value": {
											"value": "@activity('Copy incremental data from CDC').output.rowsRead",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"TableName": {
										"value": {
											"value": "@pipeline().parameters.TableName",
											"type": "Expression"
										},
										"type": "String"
									},
									"error": {
										"value": {
											"value": "@activity('Copy incremental data from CDC').error?.message",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "SqlServer1",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Insert Log Failure",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Copy incremental data from CDC",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[InsertLog]",
								"storedProcedureParameters": {
									"BronzeCount": {
										"value": {
											"value": "@activity('Copy incremental data from CDC').output?.rowsCopied",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"DbName": {
										"value": {
											"value": "@pipeline().parameters.DBName",
											"type": "Expression"
										},
										"type": "String"
									},
									"RunStatus": {
										"value": "Failure",
										"type": "String"
									},
									"ServerName": {
										"value": {
											"value": "@pipeline().parameters.ServerName",
											"type": "Expression"
										},
										"type": "String"
									},
									"SourceCount": {
										"value": {
											"value": "@activity('Copy incremental data from CDC').output?.rowsRead",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"TableName": {
										"value": {
											"value": "@pipeline().parameters.TableName",
											"type": "Expression"
										},
										"type": "String"
									},
									"error": {
										"value": {
											"value": "@activity('Copy incremental data from CDC').error?.message",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "SqlServer1",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Update LSN",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Copy incremental data from CDC",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[Update_CDCLSN_Version]",
								"storedProcedureParameters": {
									"lsn": {
										"value": {
											"value": "@pipeline().parameters.LSNEndTime",
											"type": "Expression"
										},
										"type": "String"
									},
									"serverName": {
										"value": {
											"value": "@pipeline().parameters.ServerName",
											"type": "Expression"
										},
										"type": "String"
									},
									"TableName": {
										"value": {
											"value": "@pipeline().parameters.TableName",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "SqlServer1",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "LookupLSNCDC",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"sqlReaderQuery": {
							"value": "\nSelect * from dbo.table_store_CDC_version where TableName= '@{pipeline().parameters.TableName}' and servername = '@{pipeline().parameters.ServerName}'",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_SQL_Config1",
						"type": "DatasetReference"
					}
				}
			}
		],
		"parameters": {
			"ServerName": {
				"type": "string",
				"defaultValue": "sqlpocnonprod.database.windows.net"
			},
			"DBName": {
				"type": "string",
				"defaultValue": "POC"
			},
			"SchemaName": {
				"type": "string",
				"defaultValue": "dbo"
			},
			"TableName": {
				"type": "string",
				"defaultValue": "customers"
			},
			"LSNStartTime": {
				"type": "string",
				"defaultValue": "2023-02-18 00:17:01.087"
			},
			"LSNEndTime": {
				"type": "string",
				"defaultValue": "2023-02-20 08:37:01.087"
			},
			"ADLSContainerName": {
				"type": "string",
				"defaultValue": "landingbronze"
			},
			"ADLSDirectoryName": {
				"type": "string"
			},
			"StageDirectoryName": {
				"type": "string",
				"defaultValue": "stgprocessing"
			}
		},
		"variables": {
			"LSNVal": {
				"type": "String"
			}
		},
		"annotations": []
	}
}